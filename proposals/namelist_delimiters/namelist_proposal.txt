To: J3                                                     J3/XX-XXX
From: Marshall Ward
Subject: Require delimiters for character arrays in namelist output
Date: 19 November 2019

Proposal for Fortran Standard: 202y


1. Introduction

According to the current standard, a WRITE statement applied to a
namelist group containing a character array will produce a namelist file
whose character arrays have no delimiters (i.e. space-delimited) when the
DELIM specifier has its default value of NONE.  In this case, the
namelist output does not conform to the namelist specification.

The following straightforward use case outlined below

   open(*io-unit*, file=*file-name-expr*)
   write(*io-unit*, [nml=]*namelist-group-name*) *output-item-list*

does not produce a valid namelist when *namelist-group-name* contains a
character array.

Our proposal is to override the default value of DELIM when a WRITE
statement is applied to a namelist group.  Other formatted output such
as list-directed output would be unaffected by this proposal.


2. Interpretation

The namelist format is described in section 13.11 of the standard, and
13.11.3.3p7 requires that character arrays in namelist groups must be
delimited with single or double quotes.

   When the next effective item is of type character, the input form
   consists of a sequence of zero or more rep-chars whose kind type
   parameter is implied by the kind of the corresponding list item,
   delimited by apostrophes or quotes.

Any namelist whose character arrays are non-delimited is non-conformant.
Any parsing of this output is therefore considered to be unformatted,
and the interpretation is at the discretion of the interpreter.

Without delimiters, many character arrays become unparseable.  If a
character array contains any lexical namelist tokens, such as `&` or
`/`, then any non-delimited values may be misinterpreted as part of the
namelist object structure.

The standard acknowledges the limitations of non-delimited character
array parsing, and specifically directs the interpreter to ignore the
value of DELIM when reading a namelist (12.5.6.8).

   The scalar-default-char-expr shall evaluate to APOSTROPHE, QUOTE, or
   NONE.  The DELIM= specifier is permitted only for a connection for
   formatted input/output. It specifies the delimiter mode (12.6.2.8)
   for list-directed (13.10.4) and namelist (13.11.4.2) output for the
   connection. This mode has no effect on input.

However, despite the acknowledgment of the issues above, the default
behavior of a WRITE command is to produce non-delimited character
arrays.  From 13.11.4.2p1,

   Values in namelist output records are edited as for list-directed
   output (13.10.4).

This is done despite the fact that list-directed output follows
different I/O rules for character arrays.  From 13.10.3.1p7 (my
emphasis),

   When the next effective item is of type character, the input form
   consists of a **possibly** delimited sequence of zero or more
   rep-chars whose kind type parameter is implied by the kind of the
   effective item.

The namelist specification 13.11.3.3p7 deliberately omits "possibly"
from its description.

In other words, list-directed output permits non-delimited arrays,
whereas namelists do not.  In addition, the default value of DELIM is to
revert back to its value in the OPEN call.  From 12.5.6.8p1,

   If this specifier is omitted in an OPEN statement that initiates a
   connection, the default value is NONE.

The default behavior of a WRITE call using namelist data is therefore to
produce an output which is non-conformant with the namelist standard.


3. Example

Consider the program listed below, which will produce a namelist
containing a single group `sample_nml`, containing a single character
array, `input`.

   program writenml
     implicit none
     character(len=20) :: input
     namelist /sample_nml/ input

     input = trim("some/path/to/file")
     open(5, file="out.nml")
     write(5, nml=sample_nml)
   end program writenml

According to the interpretation above, the absence of a DELIM argument
means that `input` is formatted with no delimiter.  A
standard-conforming output would be

   &SAMPLE_NML
   INPUT   = some/path/to/file   
   /

For this example, we have used the output produced by the Intel Fortran
Compiler 19.0.5.281.

Now consider the following program, which reads this namelist.

   program readnml
     implicit none
     character(len=20) :: input
     namelist /sample_nml/ input

     open(5, file='out.nml')
     read(5, nml=sample_nml)

     open(6, file='new.nml')
     write(6, nml=sample_nml)
   end program readnml

The namelist `new.nml` produced by this program is the following.

   &SAMPLE_NML
   INPUT   = some
   /

The namelist group `sample_nml` is terminated after the first `/` token,
and any characters following the token are ignored.

Although the interpretation is correct, it also means that a write
statement of the following form

   write(unit, nml=filename)

where the DELIM argument is unset will produce namelists which are
non-conforming.  The fact that this is not only possible, but is the
default behavior, is counterintuitive and is likely to introduce errors
into namelist I/O operations.

As an aside, we note that GNU Fortran explicitly breaks from the
standard and does produce a quote-delimited namelist, such as the one
shown below.

&SAMPLE_NML
 INPUT="some/path/to/file   ",
 /

This namelist above was produced by GNU Fortran 9.2.1.


4. Proposal

We propose the following addition to the *io-control-spec-list*,
detailed in 12.6.2.1.

   If *namelist-group-name* appears and a DELIM= specifier has the value
   of NONE, then this value is ignored and the data transfer uses a
   value of APOSTROPHE.

This modification would change the behavior of existing standard-compliant
interpreters, in that non-delimited character arrays of namelists would
be replaced with apostrophe-delimited arrays.  That is, non-compliant
namelists would be replaces with compliant namelists.  But existing
source code would otherwise remain compliant and continue to compile on
both older and newer interpreters.

This change is not intended to affect list-directed output, which would
continue to respect the default DELIM as specified elsewhere in the
standard.


5. Reference

Discussion of this issue on the Intel Fortran forums:

   https://software.intel.com/en-us/forums/intel-fortran-compiler/topic/831685

Discussion of GNU Fortran's decision to use quote delimiters:

   https://gcc.gnu.org/ml/gcc-patches/2014-03/msg00030.html

Initial submission and discussion to the J3 Fortran Github repository:

   https://github.com/j3-fortran/fortran_proposals/pull/94
